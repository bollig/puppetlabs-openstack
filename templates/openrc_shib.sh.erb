<% if @enable_shib_openrc %>
{% load shellfilter %}#!/usr/bin/env bash
export OS_NO_CACHE='true'

# To use an OpenStack cloud you need to authenticate against the Identity
# service named keystone, which returns a **Token** and **Service Catalog**.
# The catalog contains the endpoints for all services the user/tenant has
# access to - such as Compute, Image Service, Identity, Object Storage, Block
# Storage, and Networking (code-named nova, glance, keystone, swift,
# cinder, and neutron).
#
# *NOTE*: Using the 2.0 *Identity API* does not necessarily mean any other
# OpenStack API is version 2.0. For example, your cloud provider may implement
# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
# only for the Identity API served through keystone.
export OS_AUTH_URL={{ auth_url }}
export OS_IDENTITY_API_VERSION='3'

# With the addition of Keystone we have standardized on the term **tenant**
# as the entity that owns the resources.
export OS_PROJECT_ID={{ tenant_id }}
export OS_PROJECT_NAME="{{ tenant_name|shellfilter }}"
#export OS_USER_DOMAIN_NAME="{{ user_domain_name|shellfilter }}"
unset OS_USER_DOMAIN_NAME
if [ -z "$OS_USER_DOMAIN_NAME" ]; then unset OS_USER_DOMAIN_NAME; fi
unset OS_PROJECT_DOMAIN_NAME

# In addition to the owning entity (tenant), OpenStack stores the entity
# performing the action as the **user**.
export OS_USERNAME="{{ user.username|shellfilter }}"

# To ensure we're in the Federated Domain
#unset OS_USER_DOMAIN_NAME

export OS_REGION_NAME="{{ region|shellfilter }}"
# If your configuration has multiple regions, we set that information here.
# OS_REGION_NAME is optional and only valid in certain environments.
# Don't leave a blank variable, unset it if it was empty
if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

export OS_AUTH_TYPE=v3unscopedsaml
unset OS_AUTH_STRATEGY

export OS_IDENTITY_PROVIDER=testshib
export OS_PROTOCOL=saml2
export OS_IDENTITY_PROVIDER_URL=<%= @shib_ecp_idp_url %>

# With Keystone you pass the keystone password.
read -t 30 -p "Please enter your Shibboleth Password:" -sr OS_PASSWORD_INPUT
export OS_PASSWORD=$OS_PASSWORD_INPUT
# Delete the previous token to prevent the openstack token command from trying to use it
unset OS_TOKEN
export OS_TOKEN=$( openstack token issue -c id -f value 2> /dev/null )
if [ -z $OS_TOKEN ]; then
  echo -e "\nERROR: Bad authentication"
  unset OS_TOKEN
else
  echo -e "\nAuthenticated."
fi
unset OS_PASSWORD
unset OS_USER_DOMAIN_NAME

export OS_AUTH_TYPE=v3token

<% else %>

{% load shellfilter %}#!/usr/bin/env bash

# To use an OpenStack cloud you need to authenticate against the Identity
# service named keystone, which returns a **Token** and **Service Catalog**.
# The catalog contains the endpoints for all services the user/tenant has
# access to - such as Compute, Image Service, Identity, Object Storage, Block
# Storage, and Networking (code-named nova, glance, keystone, swift,
# cinder, and neutron).
#
# *NOTE*: Using the 3 *Identity API* does not necessarily mean any other
# OpenStack API is version 3. For example, your cloud provider may implement
# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
# only for the Identity API served through keystone.
export OS_AUTH_URL={{ auth_url }}

# With the addition of Keystone we have standardized on the term **project**
# as the entity that owns the resources.
export OS_PROJECT_ID={{ tenant_id }}
export OS_PROJECT_NAME="{{ tenant_name|shellfilter }}"
export OS_USER_DOMAIN_NAME="{{ user_domain_name|shellfilter }}"
if [ -z "$OS_USER_DOMAIN_NAME" ]; then unset OS_USER_DOMAIN_NAME; fi

# unset v2.0 items in case set
unset OS_TENANT_ID
unset OS_TENANT_NAME

# In addition to the owning entity (tenant), OpenStack stores the entity
# performing the action as the **user**.
export OS_USERNAME="{{ user.username|shellfilter }}"

# With Keystone you pass the keystone password.
#echo "Please enter your OpenStack Password: "
#read -sr OS_PASSWORD_INPUT
#export OS_PASSWORD=$OS_PASSWORD_INPUT

# If your configuration has multiple regions, we set that information here.
# OS_REGION_NAME is optional and only valid in certain environments.
export OS_REGION_NAME="{{ region|shellfilter }}"
# Don't leave a blank variable, unset it if it was empty
if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

# Need to force IAPIv3
export OS_IDENTITY_API_VERSION=3

#'openstack token issue' will prompt users for password
echo "Please enter your OpenStack Password when prompted."
unset OS_AUTH_TYPE
unset OS_TOKEN
export OS_TOKEN=$(openstack token issue -c id -f value)
export OS_AUTH_TYPE=v3token
# NOTE: incompatibility with v3token and USER_DOMAIN_NAME. Its needed to
# activate the token, but we need to avoid it when using the API later
unset OS_USER_DOMAIN_NAME
<% end -%>
